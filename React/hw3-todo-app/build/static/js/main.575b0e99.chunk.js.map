{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/Form/Form.js","components/TodoHeader/TodoHeader.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","content","id","onClick","lineText","className","value","deleteTodo","TodoList","todos","map","todo","key","Form","userInput","onInputChange","addItem","onSubmit","event","preventDefault","type","onChange","Header","App","currentValue","state","Math","random","setState","e","newVal","target","result","filter","firstChild","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAYeA,MATf,SAAcC,GAAQ,IACZC,EAAgBD,EAAhBC,QAASC,EAAOF,EAAPE,GACjB,OAAO,yBAAKC,QAASH,EAAMI,SAAUC,UAAU,6BAC7C,8BAAOJ,GACP,4BAAQK,MAAOJ,EAAIC,QAASH,EAAMO,WAAYF,UAAU,0BAAxD,S,MCaWG,MAhBf,SAAkBR,GAChB,OACE,6BACE,4BACGA,EAAMS,MAAMC,KAAI,SAACC,GAChB,OACE,wBAAIN,UAAU,mBACZ,kBAAC,EAAD,eAAUD,SAAUJ,EAAMI,SAAUG,WAAYP,EAAMO,YAAgBI,EAAtE,CAA4EC,IAAKD,EAAKT,aCWrFW,G,YAnBF,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,QAIxC,OACE,0BAAMX,UAAU,QAAQY,SAJL,SAACC,GACpBA,EAAMC,mBAIJ,2BACEC,KAAK,OACLd,MAAOQ,EACPO,SAAUN,EACVV,UAAU,iBAEZ,4BAAQF,QAASa,EAASX,UAAU,mBAApC,W,MCPSiB,MAJf,WACI,OAAO,0CC+EIC,E,kDA7Eb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IASRgB,QAAU,WAER,IAAMQ,EAAe,EAAKC,MAAMX,UAEhC,GAA6B,KAAzB,EAAKW,MAAMX,UAAkB,CAC/B,IAAMA,EAAY,CAEhBZ,GAAIwB,KAAKC,SACT1B,QAASuB,GAGX,EAAKI,SACH,CAGEnB,MAAM,GAAD,mBAAM,EAAKgB,MAAMhB,OAAjB,CAAwBK,MAE/B,WAEE,EAAKc,SAAS,CACZd,UAAW,UA9BF,EAqCnBC,cAAgB,SAACc,GACf,IAAMC,EAASD,EAAEE,OAAOzB,MACxB,EAAKsB,SAAS,CACZd,UAAWgB,KAxCI,EA4CnBvB,WAAa,SAACsB,GACZ,IAAMG,EAAS,EAAKP,MAAMhB,MAAMwB,QAAO,SAAAtB,GAAI,OAAIA,EAAKT,IAAM2B,EAAEE,OAAOzB,SACnE,EAAKsB,SAAS,CAAEnB,MAAOuB,KA9CN,EAiDnB5B,SAAW,SAACyB,GAC2B,aAAjCA,EAAEE,OAAOG,WAAW7B,UACtBwB,EAAEE,OAAOG,WAAW7B,UAAY,YAGhCwB,EAAEE,OAAOG,WAAW7B,UAAY,IApDlC,EAAKoB,MAAQ,CACXX,UAAW,GACXL,MAAO,IAJQ,E,qDA2DjB,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACES,UAAWqB,KAAKV,MAAMX,UACtBC,cAAeoB,KAAKpB,cACpBC,QAASmB,KAAKnB,UAEfmB,KAAKV,MAAMhB,MAAM2B,OAAS,GACzB,yBAAK/B,UAAU,QACb,kBAAC,EAAD,CAAUD,SAAU+B,KAAK/B,SAAUG,WAAY4B,KAAK5B,WAAYE,MAAO0B,KAAKV,MAAMhB,c,GAtE5E4B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.575b0e99.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./TodoItem.css\";\n\nfunction Todo(props) {\n  const { content, id } = props;\n  return <div onClick={props.lineText} className=\"d-flex align-items-center\">\n    <span>{content}</span>\n    <button value={id} onClick={props.deleteTodo} className=\"btn btn-danger ml-auto\">Sil\n    </button>\n  </div>;\n}\n\nexport default Todo;\n","import React from \"react\";\nimport TodoItem from \"../TodoItem/TodoItem\";\nimport \"./TodoList.css\";\n\nfunction TodoList(props) {\n  return (\n    <div>\n      <ul>\n        {props.todos.map((todo) => {\n          return (\n            <li className=\"list-group-item\">\n              <TodoItem lineText={props.lineText} deleteTodo={props.deleteTodo} {...todo} key={todo.id} />\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport \"./Form.css\";\n\nconst Form = ({ userInput, onInputChange, addItem }) => {\n  const handleSubmit = (event) => {\n    event.preventDefault();\n  };\n  return (\n    <form className=\"input\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={userInput}\n        onChange={onInputChange}\n        className=\"form-control\"\n      />\n      <button onClick={addItem} className=\"btn btn-primary\">\n        Ekle\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\r\nimport \"./TodoHeader.css\";\r\n\r\n\r\nfunction Header(){\r\n    return <h1>Todo List</h1>\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\nimport TodoList from \"./components/TodoList/TodoList\";\nimport \"./App.css\";\nimport Form from \"./components/Form/Form\";\nimport Header from \"./components/TodoHeader/TodoHeader\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: \"\",\n      todos: [],\n\n    };\n  }\n\n  // Eğer input alanı boş değilse todos'a ekleye\n  addItem = () => {\n    // input'ta yazılı olan string değer\n    const currentValue = this.state.userInput;\n\n    if (this.state.userInput !== \"\") {\n      const userInput = {\n        // Delete yaparken kullanılabilmesi için bir her item için random bir id\n        id: Math.random(),\n        content: currentValue,\n      };\n\n      this.setState(\n        {\n          // Var olan array'i korumak için spread operatör kullanılıyor\n          // spread operatör ile şu anki \"todos\" array elemanlarını alıyoruz ve yenisini ekliyoruz\n          todos: [...this.state.todos, userInput],\n        },\n        () => {\n          // Input'tan alınan değer state'e eklendikten sonra input'u temizliyoruz\n          this.setState({\n            userInput: \"\",\n          });\n        }\n      );\n    }\n  };\n\n  onInputChange = (e) => {\n    const newVal = e.target.value;\n    this.setState({\n      userInput: newVal,\n    });\n  };\n\n  deleteTodo = (e) => {\n    const result = this.state.todos.filter(todo => todo.id != e.target.value);\n    this.setState({ todos: result });\n  }\n\n  lineText = (e) => {\n    if (e.target.firstChild.className != \"text-line\") {\n      e.target.firstChild.className = \"text-line\";\n    }\n    else {\n      e.target.firstChild.className = \"\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Form\n          userInput={this.state.userInput}\n          onInputChange={this.onInputChange}\n          addItem={this.addItem}\n        />\n        {this.state.todos.length > 0 && (\n          <div className=\"list\">\n            <TodoList lineText={this.lineText} deleteTodo={this.deleteTodo} todos={this.state.todos} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}